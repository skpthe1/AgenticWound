# agents/graph_interpreter.py

import sys
import os
from openai import AzureOpenAI

# Adjust the system path to import config from the parent directory
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import config

class GraphInterpreter:
    def __init__(self, plot_paths):
        """
        Initialize the GraphInterpreter with the paths to the generated plots.

        Args:
            plot_paths (list): List of file paths to the plots generated by GraphPlotter.
        """
        # Validate that plot paths are provided and exist
        if not plot_paths:
            raise ValueError("No plot paths provided for interpretation")
        
        for plot_path in plot_paths:
            if not os.path.exists(plot_path):
                raise FileNotFoundError(f"Plot file not found: {plot_path}")

        self.plot_paths = plot_paths
        
        # Initialize Azure OpenAI client using configuration from config.py
        self.client = AzureOpenAI(
            api_key=config.AZURE_OPENAI_API_KEY,
            azure_endpoint=config.AZURE_ENDPOINT,
            api_version=config.OPENAI_API_VERSION
        )
        self.deployment_name = config.AZURE_DEPLOYMENT_NAME

    def interpret(self):
        """
        Interpret each plot using Azure OpenAI and return a list of interpretations.
        Since direct image interpretation isn't supported, we describe the plot's metadata
        (e.g., type, axes, variables) and ask Azure OpenAI to reason about trends and insights.

        Returns:
            list: List of dictionaries containing plot names and their interpretations.
        """
        interpretations = []

        for plot_path in self.plot_paths:
            plot_name = os.path.basename(plot_path)
            
            if "avg_wound_area_over_time" in plot_name:
                prompt = """
                You are a healthcare data analyst interpreting a graph of wound healing data.
                The graph is a line plot showing average wound area (y-axis) over time in weeks (x-axis)
                for different dressing types (e.g., Aquacel Foam, Duoderm Gel).
                Each line represents a dressing type.
                Identify potential trends (e.g., decreasing average wound area over time),
                differences between dressing types (e.g., one dressing consistently has lower average wound area),
                and any notable patterns or outliers.
                Provide a concise interpretation in 2-3 sentences.
                """
            elif "avg_wound_area_by_dressing" in plot_name:
                prompt = """
                You are a healthcare data analyst interpreting a graph of wound healing data.
                The graph is a bar chart showing the overall average wound area (y-axis) for different dressing types (x-axis).
                Each bar represents a dressing type (e.g., Aquacel Foam, Duoderm Gel).
                Identify which dressings appear most effective (lowest average wound area),
                any significant differences between dressings, and potential outliers.
                Provide a concise interpretation in 2-3 sentences.
                """
            else:
                prompt = """
                You are a healthcare data analyst interpreting a graph of wound healing data.
                The graph's details are not fully specified, but it likely represents metrics like wound area,
                time, or dressing types.
                Provide a general interpretation of what such a graph might show in terms of trends,
                differences, or outliers in 2-3 sentences.
                """

            try:
                response = self.client.chat.completions.create(
                    model=self.deployment_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=150,
                    temperature=0.7
                )
                interpretation = response.choices[0].message.content.strip()
                interpretations.append({"plot": plot_name, "interpretation": interpretation})
            except Exception as e:
                interpretations.append({"plot": plot_name, "interpretation": f"Error interpreting plot: {str(e)}"})

        return interpretations

# Example usage for testing
if __name__ == "__main__":
    from data_analyzer import DataAnalyzer
    from graph_plotter import GraphPlotter

    try:
        # Step 1: Analyze data
        analyzer = DataAnalyzer("data/wound_data.csv")
        analysis_results = analyzer.analyze()

        # Step 2: Generate plots
        plotter = GraphPlotter(analysis_results)
        plot_paths = plotter.plot()

        # Step 3: Interpret plots
        interpreter = GraphInterpreter(plot_paths)
        interpretations = interpreter.interpret()

        # Print interpretations
        for interp in interpretations:
            print(f"Plot: {interp['plot']}")
            print(f"Interpretation: {interp['interpretation']}\n")
    except Exception as e:
        print(f"Error: {str(e)}")